private SsmClient createSsmClient() {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        AWSCredentialsProvider credentials = DeviceUtil.fetchCredentials(snowball);
        String certificate = fetchCertificate(snowball);
        log.info("cert"+certificate);
        DescribeServiceResult describeServiceResult = snowball.describeService(
                new DescribeServiceRequest().withServiceId(SSM_SERVICE_NAME));

        log.info("describeServiceResult: ", describeServiceResult);
        String host = describeServiceResult.getEndpoints().get(0).getHost();
        int port = describeServiceResult.getEndpoints().get(0).getPort();
        log.info("host: " + host);
        log.info("port: " + port);
        URI endpointOverride = URI.create("https://" + host + ":" + port);
        URI endpointOverride2 = URI.create(host);
        if (clientConfiguration != null) {
            clientConfiguration.getApacheHttpClientConfig()
                    .setSslSocketFactory(newSSLConnectionSocketFactory(certificate));
            log.info("this is check for client configuraton "+clientConfiguration);
        }
        return SsmClient.builder()
                .endpointOverride(endpointOverride)
                .build();
    }
    @Test
    @Order(6)
    @Timeout(420) // 7min
    public void testListDocuments() throws JsonProcessingException {     

        try {

            SsmClient ssmClient = createSsmClient();

            ListDocumentsRequest listDocumentsRequest = ListDocumentsRequest.builder().build();
            log.info("listDocumentsRequest: " + listDocumentsRequest);

            ListDocumentsResponse response = ssmClient.listDocuments(listDocumentsRequest);
            log.info("List Documents response: " + response);

            System.out.println(response.toString());
            assertNotNull(response.toString());
        } catch (SsmException e) {
            e.printStackTrace();
            fail("Failed to run list document API call using SSM client");
        }
    }
